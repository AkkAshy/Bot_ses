from aiogram import Router, F
from aiogram.types import Message, Contact, Location, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.form import Form  # ‚Üê –ì–õ–ê–í–ù–û–ï! –°–û–°–¢–û–Ø–ù–ò–Ø FSM
from keyboards.reply import (
    contact_keyboard, institution_type_keyboard, location_keyboard, 
    confirmation_keyboard, photo_keyboard, main_menu_keyboard,
    admin_keyboard, back_to_admin_keyboard
)
from database.db import save_data, get_user_data, can_add_data
from database.models import UserData
from datetime import timedelta, datetime
import logging
import os

logger = logging.getLogger(__name__)
router = Router()

from config import ADMINS

@router.message(F.text == '/start', F.from_user.id.in_(ADMINS))
async def admin_start_handler(message: Message):
    """–ê–¥–º–∏–Ω –∑–∞—Ö–æ–¥–∏—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    await message.answer(
        "üëë **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –°–≠–°**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_keyboard)

@router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ")
async def add_institution_handler(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å
    if not can_add_data(message.from_user.id):
        await message.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 24 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö.")
        await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=main_menu_keyboard)
        return
    
    # –ï—Å–ª–∏ –º–æ–∂–Ω–æ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await message.answer("–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=contact_keyboard)
    await state.set_state(Form.waiting_for_contact)

@router.message(F.text == "üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def view_my_data_message(message: Message):
    user_data = get_user_data(message.from_user.id)
    if user_data:
        summary = (
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–¢–∏–ø: {user_data.institution_type}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_data.institution_name}\n"
            f"–ê–¥—Ä–µ—Å: {user_data.address}\n"
            f"–û—Ä–∏–µ–Ω—Ç–∏—Ä: {user_data.landmark}\n"
            f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {user_data.latitude}, {user_data.longitude}\n"
            f"–ù–æ–º–µ—Ä: {user_data.phone_number}\n"
            f"–§–æ—Ç–æ: {'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if user_data.photo_path else '–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}\n"
            f"–î–∞—Ç–∞: {user_data.created_at}"
        )
        await message.answer(summary, reply_markup=main_menu_keyboard)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å (bot –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ message)
        if user_data.photo_path and os.path.exists(user_data.photo_path):
            await message.answer_photo(FSInputFile(user_data.photo_path))
    else:
        await message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞.", reply_markup=main_menu_keyboard)

@router.message(Form.waiting_for_contact, F.contact)
async def process_contact(message: Message, state: FSMContext):
    contact: Contact = message.contact
    user = message.from_user
    data = {
        'telegram_id': user.id,
        'full_name': f"{user.first_name} {user.last_name or ''}".strip(),
        'username': f"@{user.username}" if user.username else None,
        'phone_number': contact.phone_number
    }
    await state.set_data(data)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è.", reply_markup=institution_type_keyboard)
    await state.set_state(Form.waiting_for_institution_type)

@router.message(Form.waiting_for_institution_type, F.text.in_({"–®–∫–æ–ª–∞", "–¢–µ—Ö–Ω–∏–∫—É–º / –ö–æ–ª–ª–µ–¥–∂", "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"}))
async def process_institution_type(message: Message, state: FSMContext):
    data = await state.get_data()
    data['institution_type'] = message.text
    await state.set_data(data)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–®–∫–æ–ª–∞ ‚Ññ12').", reply_markup=None)
    await state.set_state(Form.waiting_for_institution_name)

@router.message(Form.waiting_for_institution_name, F.text)
async def process_institution_name(message: Message, state: FSMContext):
    data = await state.get_data()
    data['institution_name'] = message.text
    await state.set_data(data)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è (—É–ª–∏—Ü–∞, –¥–æ–º, —Ä–∞–π–æ–Ω –∏ —Ç.–¥.).")
    await state.set_state(Form.waiting_for_address)

@router.message(Form.waiting_for_address, F.text)
async def process_address(message: Message, state: FSMContext):
    data = await state.get_data()
    data['address'] = message.text
    await state.set_data(data)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ä—è–¥–æ–º —Å —Ä—ã–Ω–∫–æ–º').")
    await state.set_state(Form.waiting_for_landmark)

@router.message(Form.waiting_for_landmark, F.text)
async def process_landmark(message: Message, state: FSMContext):
    data = await state.get_data()
    data['landmark'] = message.text
    await state.set_data(data)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.", reply_markup=location_keyboard)
    await state.set_state(Form.waiting_for_location)

@router.message(Form.waiting_for_location, F.location)
async def process_location(message: Message, state: FSMContext):
    location: Location = message.location
    data = await state.get_data()
    data['latitude'] = location.latitude
    data['longitude'] = location.longitude
    await state.set_data(data)
    await message.answer("–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", reply_markup=photo_keyboard)
    await state.set_state(Form.waiting_for_photo)

@router.message(Form.waiting_for_photo, F.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    summary = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–µ—Ä–Ω–æ –ª–∏ –≤—Å—ë —É–∫–∞–∑–∞–Ω–æ:\n"
        f"–¢–∏–ø: {data['institution_type']}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['institution_name']}\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
        f"–û—Ä–∏–µ–Ω—Ç–∏—Ä: {data['landmark']}\n"
        f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {data['latitude']}, {data['longitude']}\n"
        f"–ù–æ–º–µ—Ä: {data['phone_number']}\n"
        f"–§–æ—Ç–æ: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
    )
    await message.answer(summary, reply_markup=confirmation_keyboard)
    await state.set_state(Form.confirmation)

@router.message(Form.waiting_for_photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    try:
        photo = message.photo[-1]
        file_info = await message.bot.get_file(photo.file_id)
        file_path = f"photos/{message.from_user.id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
        await message.bot.download_file(file_info.file_path, file_path)
        
        data = await state.get_data()
        data['photo_path'] = file_path
        await state.set_data(data)
        
        summary = (
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–µ—Ä–Ω–æ –ª–∏ –≤—Å—ë —É–∫–∞–∑–∞–Ω–æ:\n"
            f"–¢–∏–ø: {data['institution_type']}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['institution_name']}\n"
            f"–ê–¥—Ä–µ—Å: {data['address']}\n"
            f"–û—Ä–∏–µ–Ω—Ç–∏—Ä: {data['landmark']}\n"
            f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {data['latitude']}, {data['longitude']}\n"
            f"–ù–æ–º–µ—Ä: {data['phone_number']}\n"
            f"–§–æ—Ç–æ: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        )
        await message.answer(summary, reply_markup=confirmation_keyboard)
        await state.set_state(Form.confirmation)
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.")
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.", reply_markup=photo_keyboard)

@router.message(Form.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm(message: Message, state: FSMContext):
    data = await state.get_data()
    if save_data(data):
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        # Inline –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÅ  –¥–∞–Ω–Ω—ã–µ", callback_data="view_my_data")]
        ])
        await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±–µ–¥–∏—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ.", reply_markup=inline_kb)
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu_keyboard)
    else:
        await message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 24 —á–∞—Å–∞.")
        await message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=main_menu_keyboard)
    await state.clear()

@router.message(Form.confirmation, F.text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å")
async def change(message: Message, state: FSMContext):
    await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ —Å —Ç–∏–ø–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è.", reply_markup=institution_type_keyboard)
    await state.set_state(Form.waiting_for_institution_type)

@router.callback_query(F.data == "view_my_data")
async def view_my_data_callback(callback_query: CallbackQuery):
    user_data = get_user_data(callback_query.from_user.id)
    if user_data:
        summary = (
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–¢–∏–ø: {user_data.institution_type}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_data.institution_name}\n"
            f"–ê–¥—Ä–µ—Å: {user_data.address}\n"
            f"–û—Ä–∏–µ–Ω—Ç–∏—Ä: {user_data.landmark}\n"
            f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {user_data.latitude}, {user_data.longitude}\n"
            f"–ù–æ–º–µ—Ä: {user_data.phone_number}\n"
            f"–§–æ—Ç–æ: {'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if user_data.photo_path else '–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}\n"
            f"–î–∞—Ç–∞: {user_data.created_at}"
        )
        await callback_query.message.answer(summary)
        if user_data.photo_path and os.path.exists(user_data.photo_path):
            await callback_query.message.answer_photo(FSInputFile(user_data.photo_path))
    else:
        await callback_query.message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    await callback_query.answer()
    # –ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback_query.message.answer("–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é:", reply_markup=main_menu_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@router.message()
async def error_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        logger.error(f"Error in state {current_state}: {message.text}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard)


# –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def user_to_admin(message: Message):
    if message.from_user.id in ADMINS:
        await message.answer("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_keyboard)
    else:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.", reply_markup=main_menu_keyboard)