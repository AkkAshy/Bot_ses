from aiogram import Router, F
from aiogram.types import Message, Contact, Location, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from states.form import Form
from keyboards.reply import contact_keyboard, institution_type_keyboard, location_keyboard, confirmation_keyboard
from database.db import save_data, get_user_data
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.text == '/start')
async def start_handler(message: Message, state: FSMContext):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –¥–ª—è –°–≠–°.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤."
    )
    await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=contact_keyboard)
    await state.set_state(Form.waiting_for_contact)

@router.message(Form.waiting_for_contact, F.contact)
async def process_contact(message: Message, state: FSMContext):
    contact: Contact = message.contact
    user = message.from_user
    data = {
        'telegram_id': user.id,
        'full_name': f"{user.first_name} {user.last_name or ''}".strip(),
        'username': f"@{user.username}" if user.username else None,
        'phone_number': contact.phone_number
    }
    await state.set_data(data)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è.", reply_markup=institution_type_keyboard)
    await state.set_state(Form.waiting_for_institution_type)

@router.message(Form.waiting_for_institution_type, F.text.in_({"–®–∫–æ–ª–∞", "–¢–µ—Ö–Ω–∏–∫—É–º / –ö–æ–ª–ª–µ–¥–∂", "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"}))
async def process_institution_type(message: Message, state: FSMContext):
    data = await state.get_data()
    data['institution_type'] = message.text
    await state.set_data(data)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è.", reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await state.set_state(Form.waiting_for_institution_name)

@router.message(Form.waiting_for_institution_name, F.text)
async def process_institution_name(message: Message, state: FSMContext):
    data = await state.get_data()
    data['institution_name'] = message.text
    await state.set_data(data)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è (—É–ª–∏—Ü–∞, –¥–æ–º, —Ä–∞–π–æ–Ω –∏ —Ç.–¥.).")
    await state.set_state(Form.waiting_for_address)

@router.message(Form.waiting_for_address, F.text)
async def process_address(message: Message, state: FSMContext):
    data = await state.get_data()
    data['address'] = message.text
    await state.set_data(data)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ä—è–¥–æ–º —Å —Ä—ã–Ω–∫–æ–º').")
    await state.set_state(Form.waiting_for_landmark)

@router.message(Form.waiting_for_landmark, F.text)
async def process_landmark(message: Message, state: FSMContext):
    data = await state.get_data()
    data['landmark'] = message.text
    await state.set_data(data)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.", reply_markup=location_keyboard)
    await state.set_state(Form.waiting_for_location)

@router.message(Form.waiting_for_location, F.location)
async def process_location(message: Message, state: FSMContext):
    location: Location = message.location
    data = await state.get_data()
    data['latitude'] = location.latitude
    data['longitude'] = location.longitude
    await state.set_data(data)
    
    # –†–µ–∑—é–º–µ
    summary = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–µ—Ä–Ω–æ –ª–∏ –≤—Å—ë —É–∫–∞–∑–∞–Ω–æ:\n"
        f"–¢–∏–ø: {data['institution_type']}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['institution_name']}\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
        f"–û—Ä–∏–µ–Ω—Ç–∏—Ä: {data['landmark']}\n"
        f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {data['latitude']}, {data['longitude']}\n"
        f"–ù–æ–º–µ—Ä: {data['phone_number']}"
    )
    await message.answer(summary, reply_markup=confirmation_keyboard)
    await state.set_state(Form.confirmation)

@router.message(Form.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm(message: Message, state: FSMContext):
    data = await state.get_data()
    if save_data(data):
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        
        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="view_my_data")]
        ])
        await message.answer("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±–µ–¥–∏—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ.", reply_markup=inline_kb)
    else:
        await message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 24 —á–∞—Å–∞.")
    await state.clear()

@router.message(Form.confirmation, F.text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å")
async def change(message: Message, state: FSMContext):
    await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ —Å —Ç–∏–ø–∞ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è.", reply_markup=institution_type_keyboard)
    await state.set_state(Form.waiting_for_institution_type)

@router.callback_query(F.data == "view_my_data")
async def view_my_data(callback_query):
    user_data = get_user_data(callback_query.from_user.id)
    if user_data:
        summary = (
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–¢–∏–ø: {user_data.institution_type}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_data.institution_name}\n"
            f"–ê–¥—Ä–µ—Å: {user_data.address}\n"
            f"–û—Ä–∏–µ–Ω—Ç–∏—Ä: {user_data.landmark}\n"
            f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {user_data.latitude}, {user_data.longitude}\n"
            f"–ù–æ–º–µ—Ä: {user_data.phone_number}\n"
            f"–î–∞—Ç–∞: {user_data.created_at}"
        )
        await callback_query.message.answer(summary)
    else:
        await callback_query.message.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å, —Å–±—Ä–æ—Å
@router.message()
async def error_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        logger.error(f"Error in state {current_state}: {message.text}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await start_handler(message, state)