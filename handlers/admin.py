from aiogram import Router, F
from aiogram.types import Message
from config import ADMINS
from utils.exporter import export_to_excel, export_to_word
from database.db import get_all_data
from keyboards.reply import admin_keyboard, main_menu_keyboard, back_to_admin_keyboard
from datetime import datetime
import logging
import os

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.text == '/start', F.from_user.id.in_(ADMINS))
async def admin_start_handler(message: Message):
    """–ê–¥–º–∏–Ω –∑–∞—Ö–æ–¥–∏—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    await message.answer(
        "üëë **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –°–≠–°**\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_keyboard)

@router.message(F.text == "üìä –≠–∫—Å–ø–æ—Ä—Ç Excel")
async def export_excel_handler(message: Message):
    if message.from_user.id not in ADMINS:
        return
    
    await message.answer("üìä –°–æ–∑–¥–∞—é Excel-–æ—Ç—á–µ—Ç...")
    
    try:
        file_path = export_to_excel()
        if file_path and os.path.exists(file_path):
            with open(file_path, 'rb') as file:
                total = len(get_all_data())
                await message.answer_document(
                    file,
                    caption=f"‚úÖ **–û—Ç—á–µ—Ç –°–≠–° (Excel)** | {total} —É—á—Ä–µ–∂–¥–µ–Ω–∏–π\n"
                           f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )
            os.remove(file_path)
            await message.answer("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å?", reply_markup=back_to_admin_keyboard)
        else:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=back_to_admin_keyboard)
            
    except Exception as e:
        logger.error(f"Excel export error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ Excel.", reply_markup=back_to_admin_keyboard)

@router.message(F.text == "üìù –≠–∫—Å–ø–æ—Ä—Ç Word")
async def export_word_handler(message: Message):
    if message.from_user.id not in ADMINS:
        return
    
    await message.answer("üìù –°–æ–∑–¥–∞—é Word-–æ—Ç—á–µ—Ç...")
    
    try:
        from utils.exporter import export_to_word
        file_path = export_to_word()
        if file_path and os.path.exists(file_path):
            with open(file_path, 'rb') as file:
                total = len(get_all_data())
                await message.answer_document(
                    file,
                    caption=f"‚úÖ **–û—Ç—á–µ—Ç –°–≠–° (Word)** | {total} —É—á—Ä–µ–∂–¥–µ–Ω–∏–π\n"
                           f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )
            os.remove(file_path)
            await message.answer("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å?", reply_markup=back_to_admin_keyboard)
        else:
            await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=back_to_admin_keyboard)
            
    except Exception as e:
        logger.error(f"Word export error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ Word.", reply_markup=back_to_admin_keyboard)

@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_handler(message: Message):
    if message.from_user.id not in ADMINS:
        return
    
    data = get_all_data()
    total = len(data)
    
    if total == 0:
        await message.answer("üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\nüìà –í—Å–µ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π: 0", reply_markup=back_to_admin_keyboard)
        return
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
    schools = len([d for d in data if d.institution_type == "–®–∫–æ–ª–∞"])
    colleges = len([d for d in data if d.institution_type == "–¢–µ—Ö–Ω–∏–∫—É–º / –ö–æ–ª–ª–µ–¥–∂"])
    universities = len([d for d in data if d.institution_type == "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"])
    
    # –° —Ñ–æ—Ç–æ / –±–µ–∑
    with_photo = len([d for d in data if d.photo_path])
    
    stats_text = (
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–≠–°**\n\n"
        f"üè´ **–í—Å–µ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏–π:** {total}\n\n"
        f"üìö **–ü–æ —Ç–∏–ø–∞–º:**\n"
        f"‚Ä¢ –®–∫–æ–ª: {schools}\n"
        f"‚Ä¢ –¢–µ—Ö–Ω–∏–∫—É–º–æ–≤: {colleges}\n"
        f"‚Ä¢ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤: {universities}\n\n"
        f"üì∏ **–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {with_photo} –∏–∑ {total}\n"
        f"üíæ **–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:** {data[-1].created_at.strftime('%d.%m.%Y %H:%M') if data else '‚Äî'}"
    )
    
    await message.answer(stats_text, reply_markup=back_to_admin_keyboard)

@router.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    await message.answer("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=main_menu_keyboard)

@router.message(F.text == "üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def back_to_admin(message: Message):
    if message.from_user.id in ADMINS:
        await message.answer("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_keyboard)
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", reply_markup=main_menu_keyboard)